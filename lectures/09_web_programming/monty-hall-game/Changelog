
Version 1:
- Basic static website

Version 2:
- Add /select webpage, rendered from a template. 
- The template contains a form with a POST request to the /reselect.

Version 3:
- implement the reselect endpoint which receives the POST request. It extracts
the selected door number and displays the selected door in the reselect3.html template

Problem:
- we need to store some state information about the game. 
State variables: winning door, your initial door selection, opened door by the host, your second choice

Version 4:
- Implement state as a module-wide dictionary game_state. When a new game is
started, we create a unique game_id and draw a random winning door and attach
it to the state. In the form in the select4.html template, we now pass the 
game_id as a URL parameter to /reselect. In the reselect function we can use
the request.get and request.form attributes to extract both the game_id and 
the user selected door. With that, we can implement the logic of the host to 
open a door (which is not the winning door). 

The result is rendered in the reselect in the reselect4.html page, where we
also added a form to pick another door. This form sends a POST request to
/final (again with the game_id attached)

Version 5:
Implements the /final page. Shows the  results of the game and a link to start
a new game.


Version 6:
Implement a /statistics page that computes the win/loss chances of all played
games. For that, I needed to extend the game_state to store all game
information


Version 7:
Makes the game look prettier by:
- Add layout template files
- Use Bootstrap (bootstrap) 
- Add images for doors and winning/loosing (using the /static folder)
